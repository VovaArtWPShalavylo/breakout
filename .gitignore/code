//
// breakout.c
//
// Computer Science 50
// Problem Set 3
//

// standard libraries
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Stanford Portable Library
#include <spl/gevents.h>
#include <spl/gobjects.h>
#include <spl/gwindow.h>

// height and width of game's window in pixels
#define HEIGHT 600
#define WIDTH 400

// number of rows of bricks
#define ROWS 3

// number of columns of bricks
#define COLS 3
#define MTOP 30
#define MTOP1 60
#define MTOP2 90
#define BHEIGHT 10
#define BWIDTH 100
#define BWIDTH1 100
#define BWIDTH2 100
#define BPADDING 2
#define BRICK_SPACE (50/11)

#define PADDLE_HEIGHT 5
#define PADDLE_WIDTH 60
#define PADDLE_FLOAT 100



// radius of ball in pixels
#define RADIUS 10
// lives
#define LIVES 1

// prototypes
void initBricks(GWindow window);
GOval initBall(GWindow window);
GRect initPaddle(GWindow window);
GLabel initScoreboard(GWindow window);
void updateScoreboard(GWindow window, GLabel label, int points);
GObject detectCollision(GWindow window, GOval ball);

int main(void)
{
    // seed pseudorandom number generator
    srand48(time(NULL));

    // instantiate window
    GWindow window = newGWindow(WIDTH, HEIGHT);

    // instantiate bricks
    initBricks(window);

    // instantiate ball, centered in middle of window
    GOval ball = initBall(window);

    // instantiate paddle, centered at bottom of window
    GRect paddle = initPaddle(window);

    // instantiate scoreboard, centered in middle of window, just above ball
    GLabel label = initScoreboard(window);

    // number of bricks initially
    int bricks = COLS * ROWS;
    int brick = COLS * ROWS;
    int brick1 = COLS * ROWS;
    // number of lives initially
    int lives = LIVES;

    // number of points initially
    int points = 0;
     
     double xVelocity = 0.0;
    double yVelocity = 0.0;

    // keep playing until game over
    while (lives > 0 && bricks > 0)
    {
       
        
        GEvent event = getNextEvent(MOUSE_EVENT);
               
        GObject object = detectCollision(window, ball);
        
        
        if (event != NULL)
        {
           
            if (getEventType(event) == MOUSE_MOVED)
            {
               
                double x = getX(event) - getWidth(paddle) / 2;
                double y = HEIGHT -PADDLE_HEIGHT - PADDLE_FLOAT;
                setLocation(paddle, x, y);
            }
           
            if(getEventType(event) == MOUSE_CLICKED)
            {
                xVelocity = drand48()*2;
                yVelocity = 2.0;
            }
        }
        
      
        if(object != NULL)
        {
           
            if(object == paddle)
            {
                yVelocity = -yVelocity;
            }
            
            else if(strcmp(getType(object),"GRect") == 0)
            {
                
                removeGWindow(window, object);
                points = points + 1;
                bricks = bricks - 1;
                brick = brick - 1;
                brick1 = brick1 - 1;
                
                yVelocity = -yVelocity;
                updateScoreboard(window, label, points);
            }
        }
        
      
        if(getY(ball) + getHeight(ball) > HEIGHT)
        {
            
            xVelocity = 0.0;
            yVelocity = 0.0;
            lives = lives - 1;
            waitForClick();
            
            
        }
        // reaction to hitting either side wall
        if(getX(ball) + getWidth(ball) > WIDTH || getX(ball) < 0)
        {
            // just go in the other direction!
            xVelocity = -xVelocity;
        }
        // reaction to hitting the top
        if(getY(ball) < 0)
        {
            // just go in the other direction!
            yVelocity = -yVelocity;
        }
        
        // move, pause ball so that you can actually "play"
        move(ball, xVelocity, yVelocity);
        pause(10);
        if(bricks == 0){
            closeGWindow(window);
        }
        
    }

    // wait for click before exiting
    waitForClick();
   
    // game over
    closeGWindow(window);
    return 0;
}

/**
 * Initializes window with a grid of bricks.
 */
void initBricks(GWindow window)
{
    // TODO
    string colour[3]={"ORANGE","GREEN","RED"};
    int offset = 30;
       
           GRect brick = newGRect(BWIDTH1 + BPADDING, BHEIGHT + BPADDING + MTOP1, BWIDTH1 - BPADDING * 2, BHEIGHT - BPADDING * 2);
           setColor(brick, "ORANGE");
           setFilled(brick, false);
             add(window, brick);
    
           GRect brick1 = newGRect(BWIDTH2 + BPADDING, BHEIGHT + BPADDING + MTOP2, BWIDTH2 - BPADDING * 2, BHEIGHT - BPADDING * 2);
           setColor(brick1, "RED");
           setFilled(brick1, false);
             add(window, brick1);
                              
           GRect bricks = newGRect(BWIDTH + BPADDING, BHEIGHT + BPADDING + MTOP, BWIDTH - BPADDING * 2, BHEIGHT - BPADDING * 2);
           setColor(bricks, "GREEN");
           setFilled(bricks, false);
             add(window, bricks);
             
    
  
}


/**
 * Instantiates ball in center of window.  Returns ball.
 */
GOval initBall(GWindow window)
{
    // TODO
    GOval circle = newGOval(WIDTH/2 - RADIUS, HEIGHT/2 + RADIUS, RADIUS*2, RADIUS*2);
    setColor(circle, "BLACK");
    setFilled(circle, true);
    add(window,circle);
    return circle;
}

/**
 * Instantiates paddle in bottom-middle of window.
 */
GRect initPaddle(GWindow window)
{
    // TODO
    GRect rect = newGRect(WIDTH/2 - PADDLE_WIDTH/2, HEIGHT/2+100, PADDLE_WIDTH, PADDLE_HEIGHT);
    setColor(rect, "BLACK");
    setFilled(rect, true);
    add(window, rect);
    return rect;
}

/**
 * Instantiates, configures, and returns label for scoreboard.
 */
GLabel initScoreboard(GWindow window)
{
    // TODO
    GLabel label = newGLabel("0");
    setFont(label, "Calibri-40");
    double x = (getWidth(window) - getWidth(label))/2;
    double y = (getHeight(window) - getHeight(label))/2;
    setLocation(label, x, y);
     setColor(label, "GRAY");
    add(window, label); 
    return label;
}

/**
 * Updates scoreboard's label, keeping it centered in window.
 */
void updateScoreboard(GWindow window, GLabel label, int points)
{
    // update label
    char s[12];
    sprintf(s, "%i", points);
    setLabel(label, s);

    // center label in window
    double x = (getWidth(window) - getWidth(label)) / 2;
    double y = (getHeight(window) - getHeight(label)) / 2;
    setLocation(label, x, y);
}

/**
 * Detects whether ball has collided with some object in window
 * by checking the four corners of its bounding box (which are
 * outside the ball's GOval, and so the ball can't collide with
 * itself).  Returns object if so, else NULL.
 */
GObject detectCollision(GWindow window, GOval ball)
{
    // ball's location
    double x = getX(ball);
    double y = getY(ball);

    // for checking for collisions
    GObject object;

    // check for collision at ball's top-left corner
    object = getGObjectAt(window, x, y);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's top-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's bottom-left corner
    object = getGObjectAt(window, x, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's bottom-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }

    // no collision
    return NULL;
}
